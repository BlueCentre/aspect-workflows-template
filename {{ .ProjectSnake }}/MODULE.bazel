bazel_dep(name = "aspect_bazel_lib", version = "2.7.1")
bazel_dep(name = "aspect_rules_lint", version = "0.18.0")
bazel_dep(name = "rules_multitool", version = "0.7.1")
{{- range .Scaffold.langs}}
{{- if eq . "JavaScript"}}
bazel_dep(name = "aspect_rules_js", version = "1.32.6")
{{- end}}
{{- if eq . "TypeScript"}}
bazel_dep(name = "aspect_rules_ts", version = "2.3.0")
{{- end}}
{{- end}}

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools:tools.lock.json")
use_repo(multitool, "multitool")

{{- range .Scaffold.langs}}
{{- if eq . "JavaScript"}}
pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")
# Allows developers to get a local node_modules tree, using
# bazel run -- @pnpm//:pnpm --dir $PWD install
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
)
use_repo(npm, "npm")
{{- end}}

{{- if eq . "TypeScript"}}
rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")
{{- end}}
{{- end}}
